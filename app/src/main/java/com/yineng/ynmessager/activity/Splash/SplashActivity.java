package com.yineng.ynmessager.activity.Splash;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.yineng.ynmessager.R;import com.yineng.ynmessager.activity.BaseActivity;import com.yineng.ynmessager.activity.LoginActivity;import com.yineng.ynmessager.activity.MainActivity;import com.yineng.ynmessager.activity.app.X5WebAppActivity;import com.yineng.ynmessager.app.AppController;import com.yineng.ynmessager.app.Const;import com.yineng.ynmessager.bean.login.LoginConfig;import com.yineng.ynmessager.bean.login.LoginThread;import com.yineng.ynmessager.bean.login.LoginUser;import com.yineng.ynmessager.db.dao.LoginUserDao;import com.yineng.ynmessager.manager.XmppConnectionManager;import com.yineng.ynmessager.service.LocateService;import com.yineng.ynmessager.service.SyncServerLoginConfig;import com.yineng.ynmessager.service.XmppConnService;import com.yineng.ynmessager.sharedpreference.LastLoginUserSP;import com.yineng.ynmessager.smack.StatusChangedCallBack;import com.yineng.ynmessager.util.AppUtils;import com.yineng.ynmessager.util.CountDownTimerUtil;import com.yineng.ynmessager.util.L;import com.yineng.ynmessager.util.PreferenceUtils;import org.apache.commons.lang3.StringUtils;import org.json.JSONException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * 启动页 * * @author 胡毅 */public class SplashActivity extends BaseActivity implements ViewPager.OnPageChangeListener{    private String tag = SplashActivity.class.getSimpleName();    private ImageView splashImg, bottomImg;    private boolean isFirstLaunch;    private LinearLayout linJumpLoad;    private ImageView startBtn;    private static final int[] pics = {R.mipmap.splash1, R.mipmap.splash2, R.mipmap.splash3};    private ViewPager vp;    private TextView splashTimeTxt;    private ViewPagerAdapter vpAdapter;    private List<View> views;    private View tv_goto_login;    private CountDownTimerUtil mCountDownTimerUtil;//倒计时工具类    private LastLoginUserSP lastUser;    private LoginUserDao mLoginUserDao;// 用户登陆帐号    private HashMap<String, String> imageInfo = new HashMap<>();    //打开外部网页    private final int OPEN_URL_CODE = 100;    private final static int START_LOGIN_SERVICE = 6000;    private boolean isLogin = true;    private Handler mHandler = new Handler() {        @Override        public void dispatchMessage(Message msg) {            //  Auto-generated method stub            switch (msg.what) {                case 1:                    mHandler.postDelayed(mCommonLaunchAction, 500);                    break;                case START_LOGIN_SERVICE:                    Intent serviceIntent = new Intent(SplashActivity.this, XmppConnService.class);                    serviceIntent.putExtra("isAutoLogin", true);                    SplashActivity.this.startService(serviceIntent);// 开启服务，自动登陆                    break;                case LoginThread.USER_STATUS_LOGINED_OTHER:                    //其它地方已经登陆了                    isLogin = false;                    break;                default:                    break;            }            super.dispatchMessage(msg);        }    };    /**     * 启动程序的操作     */    private Runnable mCommonLaunchAction = new Runnable() {        @Override        public void run() {            //防止第一次打开应用时，正在显示升级对话框，然后自动进入到登陆界面            if (isFirstLaunch) {                return;            }            if (lastUser.isExistsUser() && isLogin) {// 如果本机已有登陆记录,不管网络状况，直接到主页。                AppController.UPDATE_CHECK_IP = LastLoginUserSP.getServerInfoCenterHost(SplashActivity.this);//获取计费系统地址                Intent mainActivityIntent = new Intent(SplashActivity.this,                        MainActivity.class);                SplashActivity.this.startActivity(mainActivityIntent);                //1.判断用户最后一次登录时间是否超时；2.判断用户最后登录方式是否在配置中存在                mHandler.sendEmptyMessage(START_LOGIN_SERVICE);                Log.i(mTag, "自动登录成功，启动server");                SplashActivity.this.finish();            } else {// 如果没有登陆帐号记录                Intent intent = new Intent(SplashActivity.this,                        LoginActivity.class);                SplashActivity.this.startActivity(intent);                SplashActivity.this.finish();            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        L.i(tag, "启动");        isFirstLaunch = PreferenceUtils.getPrefBoolean(this,                Const.IS_FIRST_LAUNCH, true);        lastUser = LastLoginUserSP                .getInstance(SplashActivity.this);        if (isFirstLaunch) {//第一次启动            setContentView(R.layout.activity_splash_fisrt_launch_layout);            PreferenceUtils.setPrefBoolean(this, Const.IS_FIRST_LAUNCH, false);        } else {            setContentView(R.layout.activity_splash_layout);            // 如果本机已有登陆记录，一进来就开启登录服务            Log.i(tag, lastUser.isExistsUser() + ":是否存在帐号");            if (lastUser.isExistsUser()) {                AppController appController = AppController.getInstance();                appController.CONFIG_YNEDUT_V8_URL = lastUser.getUserServicesAddress() + "/";                try {                    mLoginUserDao = new LoginUserDao(this);                    LoginUser loginUser = mLoginUserDao.getLoginUserByUserNo(lastUser.getUserAccount());                    //获取配置文件里的登录天数                    LoginConfig loginConfig = lastUser.getServiceLoginConfig();                    //获取最后一次登录方式                    int lastLoginType = loginUser.getLastLoginType();                    boolean isSupportPhone = loginConfig.isLoginByMobile();                    boolean isSupportAccount = loginConfig.isLoginByAccount();                   if (lastLoginType == LoginConfig.LOGIN_TYPE_PHONE && !isSupportPhone) {                        //如果最后一次登录是手机，但是服务器配置中不支持则无法自动登录                        isLogin = false;                        Log.i(mTag, "自动登录失败：配置错误");                    } else if (lastLoginType == LoginConfig.LOGIN_TYPE_ACCOUNT && !isSupportAccount) {                        //如果最后一次登录是帐号密码，但是服务器配置中不支持则无法自动登录                        isLogin = false;                        Log.i(mTag, "自动登录失败：配置错误");                    } else {                       isLogin = true;                    }                }  catch (NullPointerException e) {                    e.printStackTrace();                    isLogin = false;                    lastUser.saveUserPassword("");                }            }            L.v("SplashActivity", "isFirstLaunch ->" + isFirstLaunch);        }        //获取服务器登录配置        Intent asynConfigIntent = new Intent(this, SyncServerLoginConfig.class);        startService(asynConfigIntent);        initView();    }    private void initView() {        if (isFirstLaunch) {            tv_goto_login = findViewById(R.id.tv_goto_login);            startBtn = (ImageView) tv_goto_login.findViewById(R.id.startBtn);            startBtn.setOnClickListener(onClick);            views = new ArrayList();            View v1 = inflateWelView(R.mipmap.splash1, null);            View v2 = inflateWelView(R.mipmap.splash2, null);            View v3 = inflateWelView(R.mipmap.splash3, null);            views.add(v1);            views.add(v2);            views.add(v3);            vp = (ViewPager) findViewById(R.id.viewpager);            vp.setOffscreenPageLimit(3);            // 初始化Adapter            vpAdapter = new ViewPagerAdapter(views);            vp.setAdapter(vpAdapter);            // 绑定回调            vp.addOnPageChangeListener(this);        } else {            //判断登录url中是否包含http            String serviceUrl = LastLoginUserSP.getInstance(this).getUserServicesAddress();            if (!serviceUrl.toLowerCase().contains("http")) {                //清空服务器地址和用户密码                LastLoginUserSP sharePre = LastLoginUserSP.getInstance(this);                sharePre.saveUserPassword("");                sharePre.saveUserServicesAddress("");                sharePre.cleanUserServerUrls(this);            }            //判断是否阿里推送进入主界面            if (!AppController.getInstance().isAliTuisong) {                //加载启动页面                splashImg = (ImageView) findViewById(R.id.splash_img);                splashTimeTxt = (TextView) findViewById(R.id.splash_time_txt);                linJumpLoad = (LinearLayout) findViewById(R.id.lin_jump_load);                bottomImg = (ImageView) findViewById(R.id.splash_bottom_img);                splashImg.setOnClickListener(onClick);                linJumpLoad.setOnClickListener(onClick);                //设置本地图片,判断是默认图片还是广告图，如果是默认则不显示倒计时                if (!setLocalImage()) {                    //没有倒计时，本地页面                    linJumpLoad.setVisibility(View.GONE);                    bottomImg.setVisibility(View.GONE);                    mHandler.postDelayed(mCommonLaunchAction, 1000);                } else {                    linJumpLoad.setVisibility(View.VISIBLE);                    bottomImg.setVisibility(View.VISIBLE);                    //倒计时,广告页面                    mCountDownTimerUtil = new CountDownTimerUtil(4000, 1000, splashTimeTxt);                    mCountDownTimerUtil.start();                    mHandler.postDelayed(mCommonLaunchAction, 3000);                }            } else {                mHandler.post(mCommonLaunchAction);            }        }    }    /**     * 打开外部网页后直接进入下一个界面     *     * @param requestCode     * @param resultCode     * @param data     */    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == OPEN_URL_CODE) {            mHandler.post(mCommonLaunchAction);        }    }    private View inflateWelView(int imgResId, View.OnClickListener l) {        LayoutInflater inflater = LayoutInflater.from(this);        View w = inflater.inflate(R.layout.welcome_item_layout, null);        ((ImageView) w.findViewById(R.id.wel_img)).setImageResource(imgResId);        return w;    }    /**     * 设置默认图片     */    private boolean setLocalImage() {        //如果本地有图片加载本地图片        if (SaveImageAsyncTask.hasImage(SaveImageAsyncTask.SAVE_SPLASH)) {            Log.e("yhu", "本地有图片");            //启动页未更新            String localPath = SaveImageAsyncTask.localImagePath(SaveImageAsyncTask.SAVE_SPLASH);            Bitmap splashBitmap = BitmapFactory.decodeFile(localPath);            splashImg.setImageBitmap(splashBitmap);            //获取本地图片信息            try {                this.imageInfo = lastUser.getImageInfo(LastLoginUserSP.SPLASH_LOCAL_IMAGE_ID);            } catch (JSONException e) {                e.printStackTrace();            } catch (NullPointerException e) {                splashImg.setImageBitmap(splashBitmap);            }            return true;        } else {            imageInfo = null;            return false;        }    }    private View.OnClickListener onClick = new View.OnClickListener() {        @Override        public void onClick(View v) {            switch (v.getId()) {                case R.id.startBtn:                    Intent intent = new Intent(SplashActivity.this,                            LoginActivity.class);                    SplashActivity.this.startActivity(intent);                    SplashActivity.this.finish();                    // 结束当前Activity并启动新Activity之前的一个过度动画                    overridePendingTransition(R.anim.zoom_out_enter,                            R.anim.zoom_out_exit);                    break;                case R.id.lin_jump_load:                    mHandler.removeCallbacks(mCommonLaunchAction);                    //结束倒计时                    if (mCountDownTimerUtil != null) {                        mCountDownTimerUtil.cancel();                    }                    mHandler.post(mCommonLaunchAction);                    break;                case R.id.splash_img:                    //如果图片信息是空，或者获取不到url则不跳转                    if (imageInfo == null) {                        return;                    }                    if (StringUtils.isEmpty(imageInfo.get("url"))) {                        return;                    }                    //广告跳转                    mHandler.removeCallbacks(mCommonLaunchAction);                    //结束倒计时                    if (mCountDownTimerUtil != null) {                        mCountDownTimerUtil.cancel();                    }                    Intent it = new Intent(SplashActivity.this, X5WebAppActivity.class);                    it.putExtra("url", imageInfo.get("url"));                    startActivityForResult(it, OPEN_URL_CODE);                    break;            }        }    };    @Override    public void onBackPressed() {        super.onBackPressed();        if (mHandler.hasMessages(1)) {            mHandler.removeMessages(1);        }    }    @Override    protected void onStop() {        super.onStop();        if (mHandler.hasMessages(1)) {            mHandler.removeMessages(1);        }    }    @Override    public void onPageScrollStateChanged(int arg0) {    }    @Override    public void onPageScrolled(int arg0, float arg1, int arg2) {    }    @Override    public void onPageSelected(int arg0) {        if (arg0 == pics.length - 1) {            tv_goto_login.setVisibility(View.VISIBLE);        } else {            tv_goto_login.setVisibility(View.GONE);        }    }    public class ViewPagerAdapter extends PagerAdapter {        // 界面列表        private List<View> views;        public ViewPagerAdapter(List<View> views) {            this.views = views;        }        // 销毁arg1位置的界面        @Override        public void destroyItem(ViewGroup container, int position, Object object) {            container.removeView(views.get(position));        }        // 获得当前界面数        @Override        public int getCount() {            if (views != null) {                return views.size();            }            return 0;        }        // 初始化arg1位置的界面        @Override        public Object instantiateItem(ViewGroup container, int position) {            container.addView(views.get(position), 0);            return views.get(position);        }        // 判断是否由对象生成界面        @Override        public boolean isViewFromObject(View arg0, Object arg1) {            return (arg0 == arg1);        }    }    @Override    protected void onDestroy() {        super.onDestroy();        if (mCountDownTimerUtil != null) {            mCountDownTimerUtil.cancel();        }    }}